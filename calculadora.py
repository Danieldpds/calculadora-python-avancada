import math

class Calculadora:
    def __init__(self):
        self.historico = []
    
    def adicionar_ao_historico(self, operacao, resultado):
        """Adiciona opera√ß√£o ao hist√≥rico"""
        self.historico.append(f"{operacao} = {resultado}")
    
    def somar(self, a, b):
        """Soma dois n√∫meros"""
        resultado = a + b
        self.adicionar_ao_historico(f"{a} + {b}", resultado)
        return resultado
    
    def subtrair(self, a, b):
        """Subtrai dois n√∫meros"""
        resultado = a - b
        self.adicionar_ao_historico(f"{a} - {b}", resultado)
        return resultado
    
    def multiplicar(self, a, b):
        """Multiplica dois n√∫meros"""
        resultado = a * b
        self.adicionar_ao_historico(f"{a} * {b}", resultado)
        return resultado
    
    def dividir(self, a, b):
        """Divide dois n√∫meros"""
        if b == 0:
            raise ValueError("Erro: Divis√£o por zero n√£o √© permitida!")
        resultado = a / b
        self.adicionar_ao_historico(f"{a} / {b}", resultado)
        return resultado
    
    def potencia(self, base, expoente):
        """Calcula pot√™ncia"""
        resultado = base ** expoente
        self.adicionar_ao_historico(f"{base} ^ {expoente}", resultado)
        return resultado
    
    def raiz_quadrada(self, numero):
        """Calcula raiz quadrada"""
        if numero < 0:
            raise ValueError("Erro: N√£o √© poss√≠vel calcular raiz quadrada de n√∫mero negativo!")
        resultado = math.sqrt(numero)
        self.adicionar_ao_historico(f"‚àö{numero}", resultado)
        return resultado
    
    def raiz_n_esima(self, numero, indice):
        """Calcula raiz n-√©sima"""
        if numero < 0 and indice % 2 == 0:
            raise ValueError("Erro: N√£o √© poss√≠vel calcular raiz par de n√∫mero negativo!")
        if indice == 0:
            raise ValueError("Erro: √çndice da raiz n√£o pode ser zero!")
        resultado = numero ** (1/indice)
        self.adicionar_ao_historico(f"{indice}‚àö{numero}", resultado)
        return resultado
    
    def fatorial(self, numero):
        """Calcula fatorial"""
        if numero < 0:
            raise ValueError("Erro: Fatorial n√£o √© definido para n√∫meros negativos!")
        if not isinstance(numero, int):
            raise ValueError("Erro: Fatorial s√≥ √© definido para n√∫meros inteiros!")
        if numero > 170:
            raise ValueError("Erro: N√∫mero muito grande para calcular fatorial!")
        resultado = math.factorial(numero)
        self.adicionar_ao_historico(f"{numero}!", resultado)
        return resultado
    
    def seno(self, angulo_graus):
        """Calcula seno (√¢ngulo em graus)"""
        angulo_radianos = math.radians(angulo_graus)
        resultado = math.sin(angulo_radianos)
        self.adicionar_ao_historico(f"sin({angulo_graus}¬∞)", resultado)
        return resultado
    
    def cosseno(self, angulo_graus):
        """Calcula cosseno (√¢ngulo em graus)"""
        angulo_radianos = math.radians(angulo_graus)
        resultado = math.cos(angulo_radianos)
        self.adicionar_ao_historico(f"cos({angulo_graus}¬∞)", resultado)
        return resultado
    
    def tangente(self, angulo_graus):
        """Calcula tangente (√¢ngulo em graus)"""
        angulo_radianos = math.radians(angulo_graus)
        resultado = math.tan(angulo_radianos)
        self.adicionar_ao_historico(f"tan({angulo_graus}¬∞)", resultado)
        return resultado
    
    def logaritmo(self, numero, base=10):
        """Calcula logaritmo"""
        if numero <= 0:
            raise ValueError("Erro: Logaritmo n√£o √© definido para n√∫meros negativos ou zero!")
        if base <= 0 or base == 1:
            raise ValueError("Erro: Base do logaritmo deve ser positiva e diferente de 1!")
        if base == 10:
            resultado = math.log10(numero)
            self.adicionar_ao_historico(f"log({numero})", resultado)
        else:
            resultado = math.log(numero, base)
            self.adicionar_ao_historico(f"log{base}({numero})", resultado)
        return resultado
    
    def logaritmo_natural(self, numero):
        """Calcula logaritmo natural (base e)"""
        if numero <= 0:
            raise ValueError("Erro: Logaritmo natural n√£o √© definido para n√∫meros negativos ou zero!")
        resultado = math.log(numero)
        self.adicionar_ao_historico(f"ln({numero})", resultado)
        return resultado
    
    def porcentagem(self, valor, percentual):
        """Calcula percentual de um valor"""
        resultado = (valor * percentual) / 100
        self.adicionar_ao_historico(f"{percentual}% de {valor}", resultado)
        return resultado
    
    def modulo(self, a, b):
        """Calcula resto da divis√£o (m√≥dulo)"""
        if b == 0:
            raise ValueError("Erro: Divis√£o por zero n√£o √© permitida!")
        resultado = a % b
        self.adicionar_ao_historico(f"{a} % {b}", resultado)
        return resultado
    
    def mostrar_historico(self):
        """Mostra o hist√≥rico de opera√ß√µes"""
        if not self.historico:
            print("Hist√≥rico vazio.")
            return
        print("\n=== HIST√ìRICO DE OPERA√á√ïES ===")
        for i, operacao in enumerate(self.historico, 1):
            print(f"{i}. {operacao}")
    
    def limpar_historico(self):
        """Limpa o hist√≥rico de opera√ß√µes"""
        self.historico.clear()
        print("Hist√≥rico limpo!")

def obter_numero(mensagem):
    """Obt√©m um n√∫mero v√°lido do usu√°rio"""
    while True:
        try:
            return float(input(mensagem))
        except ValueError:
            print("Erro: Digite um n√∫mero v√°lido!")

def obter_numero_inteiro(mensagem):
    """Obt√©m um n√∫mero inteiro v√°lido do usu√°rio"""
    while True:
        try:
            return int(input(mensagem))
        except ValueError:
            print("Erro: Digite um n√∫mero inteiro v√°lido!")

def mostrar_menu():
    """Mostra o menu principal"""
    print("\n" + "="*50)
    print("           CALCULADORA PYTHON")
    print("="*50)
    print("1.  Soma (+)")
    print("2.  Subtra√ß√£o (-)")
    print("3.  Multiplica√ß√£o (*)")
    print("4.  Divis√£o (/)")
    print("5.  Pot√™ncia (^)")
    print("6.  Raiz quadrada (‚àö)")
    print("7.  Raiz n-√©sima")
    print("8.  Fatorial (!)")
    print("9.  Seno")
    print("10. Cosseno")
    print("11. Tangente")
    print("12. Logaritmo")
    print("13. Logaritmo natural (ln)")
    print("14. Porcentagem (%)")
    print("15. M√≥dulo (%)")
    print("16. Ver hist√≥rico")
    print("17. Limpar hist√≥rico")
    print("0.  Sair")
    print("="*50)

def pausar():
    """Pausa a execu√ß√£o at√© o usu√°rio pressionar Enter"""
    input("\nPressione Enter para continuar...")

def continuar_calculando():
    """Pergunta se o usu√°rio quer continuar calculando"""
    while True:
        opcao = input("\nDeseja continuar calculando? (s/n): ").strip().lower()
        if opcao in ['s', 'sim', 'y', 'yes']:
            return True
        elif opcao in ['n', 'n√£o', 'nao', 'no']:
            return False
        else:
            print("Digite 's' para sim ou 'n' para n√£o.")

def main():
    """Fun√ß√£o principal"""
    calc = Calculadora()
    resultado_anterior = None
    
    print("="*60)
    print("           üßÆ CALCULADORA PYTHON AVAN√áADA üßÆ")
    print("="*60)
    print("Bem-vindo √† calculadora mais completa!")
    print("Voc√™ pode usar o resultado anterior em novas opera√ß√µes.")
    print("="*60)
    
    while True:
        mostrar_menu()
        
        try:
            opcao = input(f"\nEscolha uma op√ß√£o: ").strip()
            
            if opcao == "0":
                print("\n" + "="*50)
                print("Obrigado por usar a calculadora!")
                print("At√© a pr√≥xima! üëã")
                print("="*50)
                break
            
            elif opcao == "1":  # Soma
                print("\n" + "="*30)
                print("   ‚ûï SOMA")
                print("="*30)
                a = obter_numero("Digite o primeiro n√∫mero: ")
                b = obter_numero("Digite o segundo n√∫mero: ")
                resultado = calc.somar(a, b)
                print(f"\n‚úÖ Resultado: {a} + {b} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "2":  # Subtra√ß√£o
                print("\n" + "="*30)
                print("   ‚ûñ SUBTRA√á√ÉO")
                print("="*30)
                a = obter_numero("Digite o primeiro n√∫mero: ")
                b = obter_numero("Digite o segundo n√∫mero: ")
                resultado = calc.subtrair(a, b)
                print(f"\n‚úÖ Resultado: {a} - {b} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "3":  # Multiplica√ß√£o
                print("\n" + "="*30)
                print("   ‚úñÔ∏è MULTIPLICA√á√ÉO")
                print("="*30)
                a = obter_numero("Digite o primeiro n√∫mero: ")
                b = obter_numero("Digite o segundo n√∫mero: ")
                resultado = calc.multiplicar(a, b)
                print(f"\n‚úÖ Resultado: {a} √ó {b} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "4":  # Divis√£o
                print("\n" + "="*30)
                print("   ‚ûó DIVIS√ÉO")
                print("="*30)
                a = obter_numero("Digite o primeiro n√∫mero: ")
                b = obter_numero("Digite o segundo n√∫mero: ")
                resultado = calc.dividir(a, b)
                print(f"\n‚úÖ Resultado: {a} √∑ {b} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "5":  # Pot√™ncia
                print("\n" + "="*30)
                print("   üî¢ POT√äNCIA")
                print("="*30)
                base = obter_numero("Digite a base: ")
                expoente = obter_numero("Digite o expoente: ")
                resultado = calc.potencia(base, expoente)
                print(f"\n‚úÖ Resultado: {base}^{expoente} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "6":  # Raiz quadrada
                print("\n" + "="*30)
                print("   ‚àö RAIZ QUADRADA")
                print("="*30)
                numero = obter_numero("Digite o n√∫mero: ")
                resultado = calc.raiz_quadrada(numero)
                print(f"\n‚úÖ Resultado: ‚àö{numero} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "7":  # Raiz n-√©sima
                print("\n" + "="*30)
                print("   ‚àõ RAIZ N-√âSIMA")
                print("="*30)
                numero = obter_numero("Digite o n√∫mero: ")
                indice = obter_numero("Digite o √≠ndice da raiz: ")
                resultado = calc.raiz_n_esima(numero, indice)
                print(f"\n‚úÖ Resultado: {indice}‚àö{numero} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "8":  # Fatorial
                print("\n" + "="*30)
                print("   ! FATORIAL")
                print("="*30)
                numero = obter_numero_inteiro("Digite um n√∫mero inteiro: ")
                resultado = calc.fatorial(numero)
                print(f"\n‚úÖ Resultado: {numero}! = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "9":  # Seno
                print("\n" + "="*30)
                print("   üìê SENO")
                print("="*30)
                angulo = obter_numero("Digite o √¢ngulo em graus: ")
                resultado = calc.seno(angulo)
                print(f"\n‚úÖ Resultado: sin({angulo}¬∞) = {resultado:.6f}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "10":  # Cosseno
                print("\n" + "="*30)
                print("   üìê COSSENO")
                print("="*30)
                angulo = obter_numero("Digite o √¢ngulo em graus: ")
                resultado = calc.cosseno(angulo)
                print(f"\n‚úÖ Resultado: cos({angulo}¬∞) = {resultado:.6f}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "11":  # Tangente
                print("\n" + "="*30)
                print("   üìê TANGENTE")
                print("="*30)
                angulo = obter_numero("Digite o √¢ngulo em graus: ")
                resultado = calc.tangente(angulo)
                print(f"\n‚úÖ Resultado: tan({angulo}¬∞) = {resultado:.6f}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "12":  # Logaritmo
                print("\n" + "="*30)
                print("   üìä LOGARITMO")
                print("="*30)
                numero = obter_numero("Digite o n√∫mero: ")
                base = input("Digite a base (Enter para base 10): ").strip()
                if base == "":
                    resultado = calc.logaritmo(numero)
                    print(f"\n‚úÖ Resultado: log({numero}) = {resultado:.6f}")
                else:
                    base = float(base)
                    resultado = calc.logaritmo(numero, base)
                    print(f"\n‚úÖ Resultado: log{base}({numero}) = {resultado:.6f}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "13":  # Logaritmo natural
                print("\n" + "="*30)
                print("   üìä LOGARITMO NATURAL")
                print("="*30)
                numero = obter_numero("Digite o n√∫mero: ")
                resultado = calc.logaritmo_natural(numero)
                print(f"\n‚úÖ Resultado: ln({numero}) = {resultado:.6f}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "14":  # Porcentagem
                print("\n" + "="*30)
                print("   % PORCENTAGEM")
                print("="*30)
                valor = obter_numero("Digite o valor: ")
                percentual = obter_numero("Digite o percentual: ")
                resultado = calc.porcentagem(valor, percentual)
                print(f"\n‚úÖ Resultado: {percentual}% de {valor} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "15":  # M√≥dulo
                print("\n" + "="*30)
                print("   üîÑ M√ìDULO")
                print("="*30)
                a = obter_numero("Digite o primeiro n√∫mero: ")
                b = obter_numero("Digite o segundo n√∫mero: ")
                resultado = calc.modulo(a, b)
                print(f"\n‚úÖ Resultado: {a} % {b} = {resultado}")
                resultado_anterior = resultado
                pausar()
            
            elif opcao == "16":  # Ver hist√≥rico
                print("\n" + "="*30)
                print("   üìã HIST√ìRICO")
                print("="*30)
                calc.mostrar_historico()
                pausar()
            
            elif opcao == "17":  # Limpar hist√≥rico
                print("\n" + "="*30)
                print("   üóëÔ∏è LIMPAR HIST√ìRICO")
                print("="*30)
                calc.limpar_historico()
                pausar()
            
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                pausar()
        
        except ValueError as e:
            print(f"\n‚ùå Erro: {e}")
            pausar()
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            pausar()

if __name__ == "__main__":
    main()